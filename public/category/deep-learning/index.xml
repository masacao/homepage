<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>deep learning | Z.Cao</title>
    <link>www.caoz.top/category/deep-learning/</link>
      <atom:link href="www.caoz.top/category/deep-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>deep learning</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>浙ICP备2021027422号-1 Copyright@2023 Zheng Cao</copyright><lastBuildDate>Mon, 10 Apr 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/www.caoz.top/media/icon_hu11361c0288a87fbf93fc0f06f84edd26_64780_512x512_fill_lanczos_center_3.png</url>
      <title>deep learning</title>
      <link>www.caoz.top/category/deep-learning/</link>
    </image>
    
    <item>
      <title>A Simple PyTorch Implementation Benchmark</title>
      <link>www.caoz.top/post/a-simple-pytorch-implementation-benchmark/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>www.caoz.top/post/a-simple-pytorch-implementation-benchmark/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Welcome to my latest blog post, where I will be introducing a basic benchmark for PyTorch, the popular deep learning library. As a machine learning enthusiast, I understand the importance of measuring the performance of different hardware setups for deep learning tasks. By comparing the capabilities of various CPUs and GPUs, we can better understand the trade-offs and make more informed decisions when building our machine learning infrastructure.&lt;/p&gt;
&lt;p&gt;In this post, I will present the results of a basic PyTorch benchmark that I ran on various CPUs and GPUs. I will discuss the performance of these hardware components in terms of iterations per second (it/s), and provide some insights into the differences observed.&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tqdm import tqdm
import torch
import os,sys

# os.environ[&#39;CUDA_VISIBLE_DEVICES&#39;]=&#39;4&#39;

# device=torch.device(&amp;quot;cuda:4&amp;quot; if torch.cuda.is_available() else &amp;quot;cpu&amp;quot;)
# print(device)

@torch.jit.script
def foo():
    x = torch.ones((1024 * 12, 1024 * 12), dtype=torch.float32)
    y = torch.ones((1024 * 12, 1024 * 12), dtype=torch.float32)
    x = x.cuda()
    y = y.cuda()
    z = x + y
    return z


if __name__ == &#39;__main__&#39;:
    z0 = None
    for _ in tqdm(range(10000000000)):
        zz = foo()
        if z0 is None:
            z0 = zz
        else:
            z0 += zz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The following are the results obtained from the benchmarking experiment:&lt;/p&gt;
&lt;p&gt;(Updated 20/Apr)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hardware Component&lt;/th&gt;
&lt;th&gt;Performance (it/s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Nvidia 3090 GPU&lt;/td&gt;
&lt;td&gt;670&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AMD Ryzen 9 3900X CPU&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple M1 CPU&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server CPU&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server GPU GTX1080Ti&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server GPU (Overheat)&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tencent Cloud&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IIAIM Node GPU01 RTX3080&lt;/td&gt;
&lt;td&gt;402&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tencent VENUS V100 GPU&lt;/td&gt;
&lt;td&gt;677&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AMD Ryzen 5 5600G CPU&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nvidia RTX3060 GPU&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;analysis&#34;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;From the results, we can observe that GPUs generally outperform CPUs in terms of performance when running PyTorch tasks. For instance, the Nvidia 3090 GPU achieved 670 it/s, which is 6.8% of its performance when running on a CPU. This is a remarkable improvement, and demonstrates the power of GPUs for deep learning tasks.&lt;/p&gt;
&lt;p&gt;When comparing different CPUs, we can see that the Apple M1 and Server CPU show better performance than the AMD Ryzen 9 3900X and Ryzen 5 5600G. However, the difference in performance between these CPUs is not as significant as the difference between GPUs.&lt;/p&gt;
&lt;p&gt;On the GPU side, the Nvidia RTX3090 and Tencent VENUS V100 show the highest performance, followed by the IIAIM Node GPU01 RTX3080 and Nvidia RTX3060. Interestingly, the Server GPU GTX1080Ti and the overheat variant show comparatively lower performance, suggesting that thermal management plays a crucial role in GPU performance.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, this basic PyTorch benchmark highlights the advantages of using GPUs for deep learning tasks over CPUs. The performance gap between GPUs and CPUs is significant, and it is essential to choose the right hardware for your specific machine learning projects. It is also important to consider factors such as thermal management when selecting a GPU to ensure optimal performance.&lt;/p&gt;
&lt;p&gt;As a final note, we hope to see further support for GPUs and neural engines in the near future, which could potentially unlock even greater performance gains for deep learning tasks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Training 2D nnUNet with personal dataset</title>
      <link>www.caoz.top/post/training-2d-nnunet-with-personal-dataset/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      <guid>www.caoz.top/post/training-2d-nnunet-with-personal-dataset/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;nnUNet (no-new-network-Unet) is proposed to offer a end-to-end training for image segmentation, and achieve state-of-the-art performance in over 10 medical image segmentation tasks, as introduced in paper &lt;a href=&#34;https://www.nature.com/articles/s41592-020-01008-z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Automated Design of Deep Learning Methods for Biomedical Image Segmentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./arch.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although uuUNet is easy to ulitize in 3D segmentation tasks, it&amp;rsquo;s difficult to train a personal dataset with 2d images. The preparation of dataset should follow strict guidelines.&lt;/p&gt;
&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;
&lt;h4 id=&#34;step1-prepare-envs&#34;&gt;Step1. Prepare Envs&lt;/h4&gt;
&lt;p&gt;Create vitual environment in conda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conda create -n nnunet python=3.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prepare datafloders.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DATASET/nnUNet_raw_data/Task002_Heart
├── nnUNet_preprocessed
├── nnUNet_trained_models
├── nnUNet_raw
│   ├── nnUNet_croped_data
│   ├── nnUNet_raw_data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step2-covert-data&#34;&gt;Step2. Covert Data&lt;/h4&gt;
&lt;p&gt;Following guidance here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to use 2D data with nnU-Net
nnU-Net was originally built for 3D images. It is also strongestwhen applied to 3D segmentation problems because a large proportion of itsdesign choices were built with 3D in mind. Also note that many 2D segmentationproblems, especially in the non-biomedical domain, may benefit from pretrainednetwork architectures which nnU-Net does not support. Still, there is certainlya need for an out of the box segmentation solution for 2D segmentationproblems. And also on 2D segmentation tasks nnU-Net cam perform extremely well!We have, for example, won a 2D task in the cell tracking challenge with nnU-Net(see our Nature Methods paper) and we have also successfully applied nnU-Net tohistopathological segmentation problems. Working with 2D data in nnU-Netrequires a small workaround in the creation of the dataset. Essentially, allimages must be converted to pseudo 3D images (so an image with shape (X, Y)needs to be converted to an image with shape (1, X, Y). The resulting imagemust be saved in nifti format. Hereby it is important to set the spacing of thefirst axis (the one with shape 1) to a value larger than the others. If you areworking with niftis anyways, then doing this should be easy for you. Thisexample here is intended for demonstrating how nnU-Net can be used with’regular’ 2D images. We selected the massachusetts road segmentation datasetfor this because it can be obtained easily, it comes with a good amount oftraining cases but is still not too large to be difficult to handle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is my converting code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
from batchgenerators.utilities.file_and_folder_operations import *
from nnunet.dataset_conversion.utils import generate_dataset_json
from nnunet.paths import nnUNet_raw_data, preprocessing_output_dir
from nnunet.utilities.file_conversions import convert_2d_image_to_nifti
imgs = &#39;/data/caozheng/*&#39;
masks = &#39;/data/caozheng/*&#39;
root = &#39;DATASET/imagesTr&#39;
label_root = &#39;DATASET/labelsTr&#39;

for i in os.listdir(imgs):
    img = os.path.join(imgs, i)
    convert_2d_image_to_nifti(img, os.path.join(root, i.split(&#39;.&#39;)[0]), is_seg=False)
    print(&#39;Finish：&#39;+ i )

for i in os.listdir(masks):
    mask = os.path.join(masks, i)
    convert_2d_image_to_nifti(mask, os.path.join(label_root, i.split(&#39;.&#39;)[0]), is_seg=True,
                             transform=lambda x: (x &amp;gt; 0).astype(int))
    # transform=lambda x: (x &amp;gt; 0).astype(int) depends on label mode.
    print(&#39;Finish：&#39;+ i )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then generate dataset.json file, which can be mantually created or created by default code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generate_dataset_json(os.path.join(raw, &#39;dataset.json&#39;), os.path.join(raw, &#39;imagesTr&#39;),  os.path.join(raw, &#39;imagesTs&#39;), (&#39;background&#39;, &#39;caries&#39;), {&#39;background&#39;:0, &#39;caries&#39;:1}, &#39;caries_dataset&#39;, dataset_description=&#39;Private Test!&#39;, dataset_release=&#39;0.0.1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step3-move-data-to-suitable-position&#34;&gt;Step3. Move Data to suitable position&lt;/h4&gt;
&lt;p&gt;The data format of nnUnet is fixed. Task002_Heart is composed of Task ID data name, imagesTr is training data, imagesTs is test data, labelsTr is the label of training data, data sample la_003_0000.nii.gz is marked by case sample name modal.nii. It is composed of gz. Different modals are distinguished by 0000/0001/0002/0003. I set the new task ID to 100.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DATASET/nnUNet_raw/nnUNet_raw_data/Task002_Heart
├── dataset.json
├── imagesTr
│   ├── la_003_0000.nii.gz
│   ├── la_004_0000.nii.gz
│   ├── ...
├── imagesTs
│   ├── la_001_0000.nii.gz
│   ├── la_002_0000.nii.gz
│   ├── ...
└── labelsTr
    ├── la_003.nii.gz
    ├── la_004.nii.gz
    ├── ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our original 2-dimensional data is RGB three-channel, we can regard the RGB three-channel data as three modalities, extract the data of different channels separately, convert the shape to (1, width, height), and save it as 3 with SimpleITK Dimensional data.&lt;/p&gt;
&lt;h4 id=&#34;step4-install-packages&#34;&gt;Step4. Install Packages&lt;/h4&gt;
&lt;p&gt;Download nnunet code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate nnunet
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/MIC-DKFZ/nnUNet.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and install it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then set a environment variable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;export nnUNet_raw_data_base=&amp;quot;/data/Project/nnUnet/Data/nnUNet_raw&amp;quot;
export nnUNet_preprocessed=&amp;quot;/data/Project/nnUnet/Data/nnUNet_preprocessed&amp;quot;
export RESULTS_FOLDER=&amp;quot;/data/Project/nnUnet/Data/nnUNet_trained_models&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step5-pre-process-and-training&#34;&gt;Step5. Pre-process and Training&lt;/h4&gt;
&lt;p&gt;Pre-process will create large amount of data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nnUNet_plan_and_preprocess -t 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here 2 is the task id, which is identified in folder &lt;em&gt;DATASET/nnUNet_raw/nnUNet_raw_data/Task002_Heart&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s prepared for training! Here we use 5-fold traning, &amp;ndash;npz means create softmax prediction.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=6 nnUNet_train 2d nnUNetTrainerV2 Task002_Heart 0  --npz
CUDA_VISIBLE_DEVICES=6 nnUNet_train 2d nnUNetTrainerV2 Task002_Heart 1  --npz
CUDA_VISIBLE_DEVICES=6 nnUNet_train 2d nnUNetTrainerV2 Task002_Heart 2  --npz
CUDA_VISIBLE_DEVICES=6 nnUNet_train 2d nnUNetTrainerV2 Task002_Heart 3  --npz
CUDA_VISIBLE_DEVICES=6 nnUNet_train 2d nnUNetTrainerV2 Task002_Heart 4  --npz
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
